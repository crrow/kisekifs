name: Rust

on:
  workflow_call:

concurrency:
  group: rust-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  # Get Rust version for other jobs
  rust-version:
    name: Get Rust Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.rust-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Get Rust version from toolchain
        id: rust-version
        run: |
          RUST_VERSION=$(grep 'channel = ' rust-toolchain.toml | cut -d '"' -f 2)
          echo "version=$RUST_VERSION" >> $GITHUB_OUTPUT
          echo "Rust version: $RUST_VERSION"

  # Clippy linting
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs: rust-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ needs.rust-version.outputs.version }}
          components: clippy

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-clippy"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features --no-deps -- -D warnings

  # Documentation generation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: rust-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-docs"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Generate documentation
        run: cargo doc --workspace --all-features --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: -D warnings

  # Coverage report (only on main branch pushes)
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: rust-version
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ needs.rust-version.outputs.version }}

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cargo-tarpaulin
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-tarpaulin

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-coverage"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Generate coverage report
        run: |
          cargo tarpaulin \
            --engine llvm \
            --workspace \
            --all-features \
            --no-dead-code \
            --skip-clean \
            --out xml \
            --output-dir ./coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./coverage/
          if-no-files-found: error
          retention-days: 30

  # Aggregator job to ensure all Rust checks pass
  rust-success:
    name: Rust Success
    runs-on: ubuntu-latest
    needs: [clippy, docs]
    if: always()
    steps:
      - name: Check all Rust jobs status
        run: |
          if [[ "${{ needs.clippy.result }}" != "success" || \
                "${{ needs.docs.result }}" != "success" ]]; then
            echo "One or more Rust jobs failed"
            exit 1
          fi
          echo "All Rust jobs passed successfully"
